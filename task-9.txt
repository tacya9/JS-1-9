###9.1.1
Класс Clock написан в функциональном стиле. Перепишите его, используя современный синтаксис классов.

P.S. Часики тикают в консоли. Откройте её, чтобы посмотреть.
function Clock({ template }) {
  
    let timer;
  
    function render() {
      let date = new Date();
  
      let hours = date.getHours();
      if (hours < 10) hours = '0' + hours;
  
      let mins = date.getMinutes();
      if (mins < 10) mins = '0' + mins;
  
      let secs = date.getSeconds();
      if (secs < 10) secs = '0' + secs;
  
      let output = template
        .replace('h', hours)
        .replace('m', mins)
        .replace('s', secs);
  
      console.log(output);
    }
  
    this.stop = function() {
      clearInterval(timer);
    };
  
    this.start = function() {
      render();
      timer = setInterval(render, 1000);
    };
  
  }
  
  let clock = new Clock({template: 'h:m:s'});
  clock.start();

###9.1.2
Создай js компонент Message. Это будет класс Message, который будет создавать объект, со своей собственной логикой и
методом render, чтобы отрисовать DOM-элемент. Класс и его использование должно быть следующим:

class Message {
constructor(props) {
this.title = props.title
this.body = props.body

this.element = this.createComponent(); // создает DOM-элемент
}

createComponent() {
...
}
render() {
...
}
}

const messageWrapper = document.getElementById('messageWrapper'); // в HTML добавь div#messageWrapper
const warningMessage = new Message({
title: 'Warning',
body: 'You don't have permission!'
});

messageWrapper.appendChild(warningMessage.render());

После этого у тебя в HTML в указанном диве должна отрендерится такая структура (стили не нужно писать):
<div id="messageWrapper">
	<div class="c-message">
		<div class="c-message__title">** Warning **</div>
		<div class="c-message__body">You don't have permission!</div>
	</div>
</div>

